#include "vulkanlib.h"

#include "vulkanrendercontext.h"

#include "Meta/keyvalue/metatable_impl.h"

#include "Modules/uniquecomponent/uniquecomponent.h"
#include "Modules/uniquecomponent/uniquecomponentcollector.h"

#include "Modules/threading/workgroupstorage.h"

#include "Meta/math/vector4.h"

#include "vulkanrendertexture.h"
#include "vulkanrenderwindow.h"

#include "vulkanmeshloader.h"
#include "vulkanpipelineloader.h"
#include "vulkantextureloader.h"

#include "Madgine/render/constantvalues.h"

#if ANDROID
#    include <vulkan/vulkan_android.h>
#endif

UNIQUECOMPONENT(Engine::Render::VulkanRenderContext)

METATABLE_BEGIN(Engine::Render::VulkanRenderContext)
METATABLE_END(Engine::Render::VulkanRenderContext)

namespace Engine {
namespace Render {

    static const uint64_t sUnboundDefaultTexture[] = {
        0x18ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xbb231def, 0xf1251cf1, 0x122b1ce3, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7d231deb, 0xff271eff, 0xff261efd, 0xba251bef, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x36211ce7, 0xfb251cf4, 0xff251df2, 0xff241ced, 0xff271eff, 0x7f241ceb, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x102020ef, 0xdc251cf2, 0xff261efb, 0xff241cec, 0xff241ced, 0xff251df2, 0xfb251cf5, 0x38241be8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xaa241def, 0xff271eff, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241cec, 0xff261efa, 0xdd241cf2, 0x111e1ee1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x69241be9, 0xff271eff, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff271eff, 0xac241ced, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x2c231de8, 0xf2251ef6, 0xff251df4, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff271eff, 0x6b241aea, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0a1a1ae6, 0xd1251cf0, 0xff261efd, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff251df4, 0xf3251df6, 0x2d221ce8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x9c221ceb, 0xff271fff, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff261efc, 0xd2241bf0, 0x0a1a1ae6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60231dea, 0xff271eff, 0xff241cef, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff271fff, 0x9e241bec, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x211f1fe8, 0xf4251df4, 0xff251df5, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cef, 0xff271eff, 0x61251dea, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x020000ff, 0xc6241cee, 0xff261efd, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff251df5, 0xf5251df4, 0x22251ee9, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8d241beb, 0xff271fff, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff261efd, 0xc8221cee, 0x030000ff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x52221cec, 0xff261efb, 0xff241cf0, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff271fff, 0x8f241deb, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x162317e8, 0xe9251cf1, 0xff261df8, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cf0, 0xff261efc, 0x54241bea, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xb9221cee, 0xff271eff, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffaca9f8, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffcbcafb, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff261df7, 0xea251cf1, 0x172116e9, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7e241ceb, 0xff271eff, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffcbcafb, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff271eff, 0xba251bef, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x44221ae9, 0xff261df7, 0xff251cf1, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffcbcafb, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff271eff, 0x80241ceb, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x14261ae6, 0xe7241cf1, 0xff261df8, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffcbcafb, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cf1, 0xff261df8, 0x45211ae9, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xaa241def, 0xff271eff, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffcbcafb, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff261df7, 0xe8251bf1, 0x152418f3, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x6e231cec, 0xff271eff, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffbdbafa, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffd9d8fc, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff271eff, 0xab221cef, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x36211ce7, 0xfc251df4, 0xff251df2, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffaca9f8, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffcbcafb, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff271eff, 0x70241beb, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x111e1ee1, 0xdc251cf2, 0xff261efb, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffaca9f8, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffcbcafb, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff251df2, 0xfc251df5, 0x38241be8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xa8241beb, 0xff271eff, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffaca9f8, 0xffe8e7fd, 0xffe7e6fd, 0xffe7e6fd, 0xffcbc9fb, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff261efa, 0xdd241cf2, 0x111e1ef0, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x60231bea, 0xff261efd, 0xff241cee, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffa9a6f8, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffcccbfb, 0xff2119ed, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff271eff, 0xaa241bec, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x2c231de8, 0xf4251df5, 0xff251df5, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffa8a4f8, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffceccfb, 0xff1f17ed, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cee, 0xff271efd, 0x61251aea, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0b1717e8, 0xd1251cf0, 0xff261efd, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffa8a5f8, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffceccfb, 0xff1f17ed, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff251df5, 0xf5251df5, 0x2d221ce8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x93241cea, 0xff281fff, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffa9a6f8, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffcdcbfb, 0xff2018ed, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff261efc, 0xd2241bf0, 0x0c2a15ea, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x52221ce9, 0xff261efa, 0xff241cf0, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffa9a6f8, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffcdcbfb, 0xff2018ed, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff281fff, 0x95221bea, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x211f1fe8, 0xed251df5, 0xff251df7, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff928ef6, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffbdbbfa, 0xff2119ed, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cf0, 0xff261efb, 0x53251ce9, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x020000ff, 0xc6241cee, 0xff271efe, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff7570f4, 0xffe9e8fd, 0xffe8e7fd, 0xffe8e7fd, 0xffaca9f8, 0xff2119ed, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff251df6, 0xee261cf5, 0x22251ee9, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x8d241beb, 0xff271fff, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff7670f4, 0xffe9e8fd, 0xffe8e7fd, 0xffe8e7fd, 0xffa9a6f8, 0xff221aed, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff271efe, 0xc8221cee, 0x030000ff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x44221ae9, 0xff261df9, 0xff241cf1, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff6761f3, 0xffe0dffc, 0xffe8e7fd, 0xffe8e7fd, 0xff928ef6, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff271fff, 0x8f241deb, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x162317e8, 0xe7241cf1, 0xff261df7, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff1c14ec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff2018ed, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cf0, 0xff261dfa, 0x45211ae9, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xb9221cee, 0xff271eff, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff1a11ec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff2f27ee, 0xff1f17ed, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff261df7, 0xe8251bf1, 0x172116e9, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7d231deb, 0xff271eff, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff8783f5, 0xffd9d8fc, 0xffe8e7fd, 0xffe0dffc, 0xffaba8f8, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff271eff, 0xba251bef, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x36211ce7, 0xfb251cf4, 0xff251df2, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffcbcafb, 0xffe8e7fd, 0xffe7e6fd, 0xffe7e6fd, 0xffe8e7fd, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff271eff, 0x7f241ceb, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x102020ef, 0xdc251cf2, 0xff261efb, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffcbcafb, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff251df2, 0xfb251cf5, 0x38241be8, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0xaa241def, 0xff271eff, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xffcbcafb, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xffe8e7fd, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff261efa, 0xdd241cf2, 0x111e1ee1, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x6e231cec, 0xff271eff, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff8883f5, 0xffd9d8fc, 0xffe8e7fd, 0xffe0dffc, 0xffaca9f8, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff271eff, 0xac241ced, 0x00000000, 0x00000000,
        0x00000000, 0x2f211be9, 0xfc251df4, 0xff251df2, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff271eff, 0x70241beb, 0x00000000,
        0x010000ff, 0xd0241cf2, 0xff261efb, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff251df2, 0xfc251df6, 0x22251ef8,
        0x94241cee, 0xff271eff, 0xff241cec, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241ced, 0xff241cec, 0xff261df9, 0xcc241bec,
        0xff2920ff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff271eff, 0xff2920ff,
        0x81241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced, 0x80241ced,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x1c241bed, 0x36211cf1, 0x010000ff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0b2e17e8, 0x3c221aea, 0x0e2412ed, 0x00000000, 0x23241de9, 0x35221dec, 0x010000ff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x4d241aee, 0x642419ed, 0x010000ff, 0x00000000, 0x062a2ad5, 0x6e231cec, 0x3e2119ef, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x7d231bed, 0xe8221bec, 0x082020ff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x332319eb, 0xfe221bec, 0x402018eb, 0x00000000, 0x9d241ced, 0xe4221aed, 0x0a1a1ae6, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xb3241bec, 0xe3221aed, 0x053333cc, 0x00000000, 0x102020ef, 0xf8221aec, 0x97231bec, 0x00000000, 0x00000000, 0x00000000, 0x030000ff, 0x0c2a15ea, 0x00000000, 0x00000000, 0x7b211bea, 0xdd211bed, 0x020000ff, 0x0f2222ee, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x122b1cf1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x082020ff, 0x082020df, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0c2a15ff, 0x292519ec, 0xf5221bed, 0x3f2018eb, 0x00000000, 0x90231bed, 0xdf221aec, 0x0b1717e8, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xa6231ced, 0xd22319ec, 0x053333cc, 0x00000000, 0x0f2222ee, 0xe5231aed, 0x89231aec, 0x00000000, 0x91231aed, 0x78221cee, 0xc6211bec, 0xe4221aed, 0x62241aef, 0x00000000, 0x75231cee, 0xe1231bec, 0xa5241aec, 0xe9211aec, 0xaf221cee, 0x14261af2, 0x00000000, 0x44221aec, 0xcd221bee, 0xe6221aed, 0xcc231bed, 0x41231beb, 0x00000000, 0x6b241aee, 0x982319ee, 0x00000000, 0x121c1ce3, 0xab2219ed, 0x3c261aee, 0x111e1ef0, 0x99211bed, 0x77221aec, 0xd8231bec, 0xd8221bed, 0x42231bec, 0x00000000, 0x28201aec, 0xc4231bee, 0xe0231bec, 0xa7231bed, 0xe9231aed, 0x3d2119ea, 0x00000000, 0x8e2219ed, 0xd7241aed, 0x072424db, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xa6231ced, 0xd22319ec, 0x053333cc, 0x00000000, 0x0f2222ee, 0xe5231aed, 0x87201aec, 0x00000000, 0xdd211bed, 0xde221ced, 0x5b221cee, 0xb52319ee, 0xe2221bec, 0x010000ff, 0x6c231aee, 0xfe231bef, 0x8d221bef, 0x5f231bef, 0xff231bee, 0x75231aee, 0x0f2211ee, 0xe9231bed, 0xb0211cee, 0x4b221bee, 0xc4231beb, 0xdd211bed, 0x072424db, 0x9e241bed, 0xe0231aec, 0x00000000, 0x1d231aed, 0xfc221bec, 0x5a251cee, 0x191f14eb, 0xf8221aec, 0xc4231beb, 0x57231aed, 0xd9221bec, 0xbb221bef, 0x00000000, 0xac221bed, 0xe4221aed, 0x54241bed, 0xb4231aed, 0xf8221aec, 0x3c221aea, 0x00000000, 0x86221bee, 0xd4221aec, 0x053333cc, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xa7231bed, 0xd1231aeb, 0x044040bf, 0x00000000, 0x0d2727eb, 0xe4221aed, 0x89221aee, 0x00000000, 0xde221ceb, 0x7c231bec, 0x00000000, 0x63211aed, 0xf2221aee, 0x0c2a15ea, 0x6f221ced, 0xe4221aed, 0x00000000, 0x00000000, 0xcb231aed, 0xa3221bec, 0x4a221cee, 0xfa221bed, 0x292519f3, 0x00000000, 0x4f241aec, 0xfc231bec, 0x24231cea, 0x8e2219ed, 0xd3231bec, 0x00000000, 0x1a271deb, 0xed221aec, 0x55241bed, 0x172121f4, 0xf3221aed, 0x50231dec, 0x00000000, 0x96201bec, 0xd1221aeb, 0x0f2222ee, 0xe1231bec, 0x85231bee, 0x00000000, 0x2f261bef, 0xf7221aed, 0x3e211def, 0x00000000, 0x7d231bef, 0xd8231bed, 0x035555ff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xa7231bed, 0xd6231aed, 0x00000000, 0x00000000, 0x0c2a15ea, 0xec211bec, 0x7e221aed, 0x00000000, 0xde221ceb, 0x79241bec, 0x00000000, 0x68221bee, 0xef231aed, 0x0d2714eb, 0x70221bed, 0xdd211bed, 0x00000000, 0x00000000, 0xc5221bec, 0xa5201aec, 0x56241bed, 0xf5221bed, 0x202818ef, 0x00000000, 0x482319ed, 0xfb221aec, 0x25221cea, 0x8d221beb, 0xd1231aeb, 0x00000000, 0x122b1cf1, 0xee221aec, 0x55241bed, 0x172121f4, 0xf1221aed, 0x51231cec, 0x00000000, 0x99211bee, 0xcd221bec, 0x14261af2, 0xe6221aed, 0x79221bee, 0x00000000, 0x28261aec, 0xf4221bed, 0x3e211def, 0x00000000, 0x64241ced, 0xa9231beb, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x76231cee, 0xff231cf2, 0x59221aee, 0x13281bf2, 0x72241bed, 0xff241cf4, 0x4b221bee, 0x00000000, 0xe4221bed, 0x7f241aeb, 0x00000000, 0x6c211aee, 0xf6231aed, 0x0e2412ed, 0x6d231aec, 0xff231cf2, 0x56241bed, 0x2d221cee, 0xf5221bee, 0x7d231bed, 0x27211aeb, 0xff231bee, 0x76231cee, 0x172121f4, 0xa2231bee, 0xe7221aed, 0x082020ff, 0x82231bed, 0xee231aed, 0x24231cf1, 0x77221cee, 0xff231cf3, 0x54211bed, 0x182020f4, 0xf8221aec, 0x55211bea, 0x00000000, 0x9f231aec, 0xd6231beb, 0x062a2aff, 0xc82219ed, 0xc4231bee, 0x1d231aed, 0x90221bed, 0xff231bf1, 0x3e2119ea, 0x00000000, 0x46241ded, 0x72241bed, 0x030000ff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x111e1ef0, 0xb0211cee, 0xf3221bed, 0xe4221aed, 0xf1221ced, 0x90231bed, 0x030000ff, 0x053300cc, 0xcd221bec, 0x70241bed, 0x00000000, 0x5f231bec, 0xdb221aee, 0x0a1a1ae6, 0x64211ced, 0xce211bec, 0xc7231aed, 0xf5221bed, 0xd3231bee, 0x211f1ff0, 0x00000000, 0x8c231bed, 0xf4221bed, 0xe8221aed, 0xea221bec, 0x58231aee, 0x00000000, 0x35221df1, 0xe7231aec, 0xf1221aed, 0xb1231bec, 0xc82219ed, 0x4f241aec, 0x142626f2, 0xdf221aec, 0x4a221cee, 0x00000000, 0x8c231bed, 0xc1221aed, 0x00000000, 0x53221ced, 0xf3221bec, 0xec211bec, 0xb4231aed, 0xce211bec, 0x39241bed, 0x00000000, 0x9f231bed, 0xf4221bed, 0x0e2424ed, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x31241aef, 0x45211aed, 0x28261aec, 0x00000000, 0x00000000, 0x01000000, 0x0e2412ed, 0x072424ff, 0x00000000, 0x053333ff, 0x0e2424ed, 0x00000000, 0x082020ff, 0x062a2ad5, 0x13281bf2, 0x43221bf0, 0x13281be4, 0x00000000, 0x00000000, 0x00000000, 0x2e211ce9, 0x45211aed, 0x1c241bed, 0x00000000, 0x00000000, 0x00000000, 0x202818ef, 0x40241ceb, 0x030000ff, 0x082020df, 0x062a2aff, 0x010000ff, 0x0f2222ee, 0x044000ff, 0x00000000, 0x082020ff, 0x0c2a15ea, 0x00000000, 0x00000000, 0x28261aec, 0x3f201ceb, 0x020000ff, 0x0a1a1ae6, 0x044000ff, 0x00000000, 0x1e221aee, 0x322419f0, 0x01000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
        0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
    };

    Threading::WorkgroupLocal<VulkanPtr2<VkDevice, &vkDestroyDevice>> sDevice;

    Threading::WorkgroupLocal<VulkanRenderContext *> sSingleton = nullptr;

    VkDevice GetDevice()
    {
        return sDevice->get();
    }

    const std::vector<const char *> layers = {
        "VK_LAYER_KHRONOS_validation"
#if ANDROID
        ,
        "VK_LAYER_KHRONOS_timeline_semaphore"
#endif
    };

    const std::vector<const char *> extensions = {
        VK_EXT_DEBUG_UTILS_EXTENSION_NAME,
        VK_KHR_SURFACE_EXTENSION_NAME
#if WINDOWS
        ,
        VK_KHR_WIN32_SURFACE_EXTENSION_NAME
#elif ANDROID
        ,
        VK_KHR_ANDROID_SURFACE_EXTENSION_NAME
#endif
    };

    const std::vector<const char *> deviceExtensions = {
        VK_KHR_SWAPCHAIN_EXTENSION_NAME,
        VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME
    };

    static constexpr uint32_t sMaxFramesInFlight = 3;

    bool checkValidationLayerSupport()
    {
        uint32_t layerCount;
        vkEnumerateInstanceLayerProperties(&layerCount, nullptr);

        std::vector<VkLayerProperties> availableLayers(layerCount);
        vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data());

        for (const char *layerName : layers) {
            bool layerFound = false;

            for (const auto &layerProperties : availableLayers) {
                if (strcmp(layerName, layerProperties.layerName) == 0) {
                    layerFound = true;
                    break;
                }
            }

            if (!layerFound) {
                return false;
            }
        }

        return true;
    }

    static VKAPI_ATTR VkBool32 VKAPI_CALL debugCallback(
        VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
        VkDebugUtilsMessageTypeFlagsEXT messageType,
        const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData,
        void *pUserData)
    {
        Log::MessageType lvl;
        switch (messageSeverity) {
        case VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT:
            lvl = Log::MessageType::FATAL_TYPE;
            break;
        case VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT:
            lvl = Log::MessageType::WARNING_TYPE;
            break;
        case VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT:
            lvl = Log::MessageType::INFO_TYPE;
            break;
        case VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT:
            lvl = Log::MessageType::DEBUG_TYPE;
            break;
        }

        std::stringstream cout;
        cout << "Debug message";
        if (pCallbackData->pMessageIdName) {
            cout << "(" << pCallbackData->pMessageIdName << ")";
        }
        cout << ": " << pCallbackData->pMessage;

        Log::LogDummy { lvl } << cout.str();

        return VK_FALSE;
    }

    VkDebugUtilsMessengerEXT sDebugMessenger;

    void destroyInstance(VkInstance instance, VkAllocationCallbacks *pAllocator)
    {
        vkDestroyDebugUtilsMessengerEXT(instance, sDebugMessenger, nullptr);

        vkDestroyInstance(instance, pAllocator);
    }

    VulkanPtr2<VkInstance, destroyInstance> createInstance()
    {
        assert(checkValidationLayerSupport());

        VkApplicationInfo appInfo {};
        appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
        appInfo.pApplicationName = "MadgineLauncher";
        appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
        appInfo.pEngineName = "Madgine";
        appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
        appInfo.apiVersion = VK_MAKE_API_VERSION(0, 1, 1, 0);

        VkInstanceCreateInfo createInfo {};
        createInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
        createInfo.pApplicationInfo = &appInfo;

        createInfo.enabledLayerCount = layers.size();
        createInfo.ppEnabledLayerNames = layers.data();

        createInfo.enabledExtensionCount = extensions.size();
        createInfo.ppEnabledExtensionNames = extensions.data();

        VkDebugUtilsMessengerCreateInfoEXT createInfo2 {};
        createInfo2.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
        createInfo2.messageSeverity = VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
        createInfo2.messageType = VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT | VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
        createInfo2.pfnUserCallback = debugCallback;
        createInfo2.pUserData = nullptr; // Optional

        createInfo.pNext = &createInfo2;

        /* VkLayerSettingsCreateInfoEXT layerSettings {};
        layerSettings.sType = VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT;

        const VkBool32 setting_validate_sync = VK_TRUE;
        const VkLayerSettingEXT settings[] = {
            { "VK_LAYER_KHRONOS_validation", "validate_sync", VK_LAYER_SETTING_TYPE_BOOL32_EXT, 1, &setting_validate_sync }
        };
        layerSettings.pSettings = settings;
        layerSettings.settingCount = 1;

        createInfo2.pNext = &layerSettings;*/

        VulkanPtr2<VkInstance, destroyInstance> instance;
        VkResult result = vkCreateInstance(&createInfo, nullptr, &instance);
        VK_CHECK(result);

#if !ANDROID
        gladLoaderLoadVulkan(instance, nullptr, nullptr);
#endif

        result = vkCreateDebugUtilsMessengerEXT(instance, &createInfo2, nullptr, &sDebugMessenger);
        VK_CHECK(result);

        return instance;
    }

    QueueFamilyIndices findQueueFamilies(VkPhysicalDevice device)
    {
        QueueFamilyIndices indices;

        uint32_t queueFamilyCount = 0;
        vkGetPhysicalDeviceQueueFamilyProperties(device, &queueFamilyCount, nullptr);

        std::vector<VkQueueFamilyProperties> queueFamilies { queueFamilyCount };
        vkGetPhysicalDeviceQueueFamilyProperties(device, &queueFamilyCount, queueFamilies.data());

        int i = 0;
        for (const auto &queueFamily : queueFamilies) {
            bool supportsGraphics = queueFamily.queueFlags & VK_QUEUE_GRAPHICS_BIT;
#if WINDOWS
            bool supportsPresent = vkGetPhysicalDeviceWin32PresentationSupportKHR(device, i);
#elif ANDROID
            bool supportsPresent = queueFamily.queueFlags & VK_QUEUE_GRAPHICS_BIT;
#else
#    error "Unsupported Platform!"
#endif

            if (supportsGraphics && supportsPresent) {
                indices.graphicsFamily = i;
            }

            i++;
        }

        return indices;
    }

    bool isDeviceSuitable(VkPhysicalDevice device)
    {
        QueueFamilyIndices indices = findQueueFamilies(device);

        if (!indices.isComplete())
            return false;

        uint32_t extensionCount;
        vkEnumerateDeviceExtensionProperties(device, nullptr, &extensionCount, nullptr);

        std::vector<VkExtensionProperties> availableExtensions { extensionCount };
        vkEnumerateDeviceExtensionProperties(device, nullptr, &extensionCount, availableExtensions.data());

        std::set<std::string_view> requiredExtensions(deviceExtensions.begin(), deviceExtensions.end());

        for (const auto &extension : availableExtensions) {
            requiredExtensions.erase(extension.extensionName);
        }

        if (!requiredExtensions.empty()) {
            for (std::string_view ext : requiredExtensions)
                LOG_DEBUG("Does not support " << ext);
            return false;
        }

        return true;
    }

    VkPhysicalDevice selectPhysicalDevice(VkInstance instance)
    {

        VkPhysicalDevice physicalDevice = VK_NULL_HANDLE;

        uint32_t deviceCount = 0;
        vkEnumeratePhysicalDevices(instance, &deviceCount, nullptr);

        assert(deviceCount > 0);

        std::vector<VkPhysicalDevice> devices { deviceCount };
        vkEnumeratePhysicalDevices(instance, &deviceCount, devices.data());

        for (VkPhysicalDevice device : devices) {
            VkPhysicalDeviceProperties properties {};
            vkGetPhysicalDeviceProperties(device, &properties);
            LOG_DEBUG("Device: " << properties.deviceName);
            if (isDeviceSuitable(device)) {
                physicalDevice = device;
                break;
            }
        }

        assert(physicalDevice != VK_NULL_HANDLE);
        return physicalDevice;
    }

    struct Environment {
        VulkanPtr2<VkInstance, destroyInstance> mInstance;
        VkPhysicalDevice mDevice;
    };

    Environment createEnvironment()
    {
#if !ANDROID
        gladLoaderLoadVulkan(nullptr, nullptr, nullptr);
#endif
        auto instance = createInstance();
        auto physicalDevice = selectPhysicalDevice(instance);
#if !ANDROID
        gladLoaderLoadVulkan(instance, physicalDevice, nullptr);
#endif

        return { std::move(instance), std::move(physicalDevice) };
    }

    const Environment &getEnvironment()
    {
        static auto environment = createEnvironment();
        return environment;
    }

    VkInstance GetInstance()
    {
        return getEnvironment().mInstance;
    }

    VkPhysicalDevice GetPhysicalDevice()
    {
        return getEnvironment().mDevice;
    }

    VulkanRenderContext::VulkanRenderContext(Threading::TaskQueue *queue)
        : Component(queue)
        , mUploadHeap("Upload Heap")
        , mUploadAllocator(mUploadHeap)
        , mBufferMemoryHeap("Memory Heap")
        , mBufferAllocator(mBufferMemoryHeap)
        , mTempMemoryHeap("Temp Heap")
        , mTempAllocator(mTempMemoryHeap)
        , mConstantMemoryHeap("Constant Heap")
        , mConstantAllocator(mConstantMemoryHeap)
    {

        assert(!sSingleton);

        sSingleton = this;

        VkPhysicalDevice physicalDevice = getEnvironment().mDevice;

        mIndices = findQueueFamilies(physicalDevice);

        float queuePriority = 1.0f;

        VkDeviceQueueCreateInfo queueCreateInfo {};
        queueCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
        queueCreateInfo.queueFamilyIndex = mIndices.graphicsFamily.value();
        queueCreateInfo.queueCount = 1;
        queueCreateInfo.pQueuePriorities = &queuePriority;

        VkPhysicalDeviceFeatures deviceFeatures {};

        VkPhysicalDeviceTimelineSemaphoreFeatures features {};
        features.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
        features.timelineSemaphore = true;

        VkDeviceCreateInfo createInfo {};
        createInfo.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
        createInfo.pNext = &features;

        createInfo.pQueueCreateInfos = &queueCreateInfo;
        createInfo.queueCreateInfoCount = 1;

        createInfo.pEnabledFeatures = &deviceFeatures;

        createInfo.enabledLayerCount = static_cast<uint32_t>(layers.size());
        createInfo.ppEnabledLayerNames = layers.data();

        createInfo.enabledExtensionCount = deviceExtensions.size();
        createInfo.ppEnabledExtensionNames = deviceExtensions.data();

        VkResult result = vkCreateDevice(physicalDevice, &createInfo, nullptr, &*sDevice);
        VK_CHECK(result);

        vkGetDeviceQueue(*sDevice, mIndices.graphicsFamily.value(), 0, &mGraphicsQueue);

        VkDescriptorPoolSize poolSizes[5] {};
        poolSizes[0].type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;
        poolSizes[0].descriptorCount = 4;

        poolSizes[1].type = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
        poolSizes[1].descriptorCount = 128;

        poolSizes[2].type = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
        poolSizes[2].descriptorCount = 128;

        poolSizes[3].type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC;
        poolSizes[3].descriptorCount = 128;

        poolSizes[4].type = VK_DESCRIPTOR_TYPE_SAMPLER;
        poolSizes[4].descriptorCount = 2;

        VkDescriptorPoolCreateInfo poolInfo {};
        poolInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
        poolInfo.poolSizeCount = 5;
        poolInfo.pPoolSizes = poolSizes;
        poolInfo.flags = VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT;

        poolInfo.maxSets = 128;

        result = vkCreateDescriptorPool(*sDevice, &poolInfo, nullptr, &mDescriptorPool);
        VK_CHECK(result);

        VkCommandPoolCreateInfo poolInfo2 {};
        poolInfo2.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
        poolInfo2.flags = VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;
        poolInfo2.queueFamilyIndex = mIndices.graphicsFamily.value();

        result = vkCreateCommandPool(*sDevice, &poolInfo2, nullptr, &mCommandPool);
        VK_CHECK(result);

        createPipelineLayout();

        VkSemaphoreTypeCreateInfo timelineCreateInfo;
        timelineCreateInfo.sType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
        timelineCreateInfo.pNext = NULL;
        timelineCreateInfo.semaphoreType = VK_SEMAPHORE_TYPE_TIMELINE;
        timelineCreateInfo.initialValue = mLastCompletedFenceValue;

        VkSemaphoreCreateInfo semaphoreInfo;
        semaphoreInfo.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
        semaphoreInfo.pNext = &timelineCreateInfo;
        semaphoreInfo.flags = 0;

        result = vkCreateSemaphore(GetDevice(), &semaphoreInfo, nullptr, &mSemaphore);
        VK_CHECK(result);

        mNextFenceValue = mLastCompletedFenceValue + 1;

        ConstantValues values;
        mConstantBuffer.setData({ &values, sizeof(values) });
    }

    VulkanRenderContext::~VulkanRenderContext()
    {
        mConstantBuffer.reset();

        mSemaphore.reset();

        mDefaultTexture.reset();

        mBufferAllocator.deallocateAll();
        mTempAllocator.deallocateAll();
        mConstantAllocator.deallocateAll();
        mUploadAllocator.deallocateAll();

        mPipelineLayout.reset();

        mUBODescriptorSetLayout.reset();
        mHeapDescriptorSetLayout.reset();
        mTempBufferDescriptorSetLayout.reset();
        mResourceBlockDescriptorSetLayout.reset();
        mSamplerDescriptorSetLayout.reset();

        mSamplers[0].reset();
        mSamplers[1].reset();

        for (auto &[fence, buffer, resources] : mBufferPool) {
            vkFreeCommandBuffers(GetDevice(), mCommandPool, 1, &buffer);
        }

        mCommandPool.reset();

        VkResult result = vkFreeDescriptorSets(GetDevice(), mDescriptorPool, 1, &mSamplerDescriptorSet);
        VK_CHECK(result);

        freeResourceBlock(mDefaultResourceBlockDescriptorSet);

        mCommandPool.reset();
        mDescriptorPool.reset();

        sDevice->reset();

        assert(sSingleton == this);
        sSingleton = nullptr;
    }

    std::unique_ptr<RenderTarget> VulkanRenderContext::createRenderTexture(const Vector2i &size, const RenderTextureConfig &config)
    {
        return std::make_unique<VulkanRenderTexture>(this, size, config);
    }

    bool VulkanRenderContext::beginFrame()
    {
        if (!isFenceComplete(mNextFenceValue - 1))
            return false;
        return RenderContext::beginFrame();
    }

    void VulkanRenderContext::endFrame()
    {
        RenderContext::endFrame();
    }

    VkDescriptorSet VulkanRenderContext::allocateResourceBlock(std::vector<const Texture *> textures)
    {
        VkDescriptorSet descriptorSet;

        VkDescriptorSetAllocateInfo descAllocInfo {};
        descAllocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
        descAllocInfo.descriptorPool = mDescriptorPool;
        descAllocInfo.descriptorSetCount = 1;
        descAllocInfo.pSetLayouts = &std::as_const(mResourceBlockDescriptorSetLayout);
        VkResult result = vkAllocateDescriptorSets(GetDevice(), &descAllocInfo, &descriptorSet);
        VK_CHECK(result);

        VkDebugUtilsObjectNameInfoEXT nameInfo {};
        nameInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
        nameInfo.objectType = VK_OBJECT_TYPE_DESCRIPTOR_SET;
        nameInfo.objectHandle = reinterpret_cast<uintptr_t>(descriptorSet);
        nameInfo.pObjectName = "Resource Block Set";
        result = vkSetDebugUtilsObjectNameEXT(GetDevice(), &nameInfo);
        VK_CHECK(result);

        for (size_t i = 0; i < 4; ++i) {
            const VulkanTexture *tex = &mDefaultTexture;
            if (i < textures.size()) {
                tex = static_cast<const VulkanTexture *>(textures[i]);
            }

            VkDescriptorImageInfo imageDescriptorInfo {};
            imageDescriptorInfo.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
            imageDescriptorInfo.imageView = tex->view();
            imageDescriptorInfo.sampler = VK_NULL_HANDLE;

            VkWriteDescriptorSet descriptorWrite {};
            descriptorWrite.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
            descriptorWrite.dstSet = descriptorSet;
            descriptorWrite.dstBinding = i;
            descriptorWrite.dstArrayElement = 0;

            descriptorWrite.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
            descriptorWrite.descriptorCount = 1;

            descriptorWrite.pBufferInfo = nullptr;
            descriptorWrite.pImageInfo = &imageDescriptorInfo; // Optional
            descriptorWrite.pTexelBufferView = nullptr; // Optional

            vkUpdateDescriptorSets(GetDevice(), 1, &descriptorWrite, 0, nullptr);
        }

        return descriptorSet;
    }

    void VulkanRenderContext::freeResourceBlock(VkDescriptorSet descriptorSet)
    {
        VkResult result = vkFreeDescriptorSets(GetDevice(), mDescriptorPool, 1, &descriptorSet);
        VK_CHECK(result);
    }

    UniqueResourceBlock VulkanRenderContext::createResourceBlock(std::vector<const Texture *> textures)
    {
        UniqueResourceBlock block;
        block.setupAs<VkDescriptorSet>() = allocateResourceBlock(std::move(textures));
        return block;
    }

    void VulkanRenderContext::destroyResourceBlock(UniqueResourceBlock &block)
    {
        freeResourceBlock(block.release<VkDescriptorSet>());
    }

    VulkanRenderContext &VulkanRenderContext::getSingleton()
    {
        return *sSingleton;
    }

    std::unique_ptr<RenderTarget> VulkanRenderContext::createRenderWindow(Window::OSWindow *w, size_t samples)
    {
        return std::make_unique<VulkanRenderWindow>(this, w, samples);
    }

    VulkanCommandList VulkanRenderContext::fetchCommandList(std::string_view name, std::vector<VkSemaphore> waitSemaphores, std::vector<VkSemaphore> signalSemaphores)
    {
        VkCommandBuffer buffer = nullptr;

        if (mBufferPool.size() > 1) {
            auto &[fenceValue, b, resources] = mBufferPool.front();

            if (isFenceComplete(fenceValue)) {
                buffer = b;
                mBufferPool.erase(mBufferPool.begin());

                VkResult result = vkResetCommandBuffer(buffer, 0);
                VK_CHECK(result);
            }
        }

        if (!buffer) {
            VkCommandBufferAllocateInfo allocInfo {};
            allocInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
            allocInfo.commandPool = mCommandPool;
            allocInfo.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY;
            allocInfo.commandBufferCount = 1;

            VkResult result = vkAllocateCommandBuffers(GetDevice(), &allocInfo, &buffer);
            VK_CHECK(result);

            VkDebugUtilsObjectNameInfoEXT nameInfo {};
            nameInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
            nameInfo.objectType = VK_OBJECT_TYPE_COMMAND_BUFFER;
            nameInfo.objectHandle = reinterpret_cast<uintptr_t>(buffer);
            nameInfo.pObjectName = "Pooled Command Buffer";
            result = vkSetDebugUtilsObjectNameEXT(GetDevice(), &nameInfo);
            VK_CHECK(result);
        }

        VkCommandBufferBeginInfo beginInfo {};
        beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
        beginInfo.flags = 0; // Optional
        beginInfo.pInheritanceInfo = nullptr; // Optional

        VkResult result = vkBeginCommandBuffer(buffer, &beginInfo);
        VK_CHECK(result);

        vkCmdBindDescriptorSets(buffer, VK_PIPELINE_BIND_POINT_GRAPHICS, mPipelineLayout, 6, 1, &mSamplerDescriptorSet, 0, nullptr);

        return { buffer, std::move(waitSemaphores), std::move(signalSemaphores) };
    }

    RenderFuture VulkanRenderContext::ExecuteCommandList(NulledPtr<std::remove_pointer_t<VkCommandBuffer>> buffer, std::vector<VkSemaphore> waitSemaphores, std::vector<VkSemaphore> signalSemaphores, std::vector<Any> attachedResources)
    {
        VkResult result = vkEndCommandBuffer(buffer);
        VK_CHECK(result);

        waitSemaphores.insert(waitSemaphores.begin(), mSemaphore);
        std::vector<uint64_t> waitValues;
        waitValues.resize(waitSemaphores.size());
        waitValues[0] = mNextFenceValue - 1;
        signalSemaphores.insert(signalSemaphores.begin(), mSemaphore);
        std::vector<uint64_t> signalValues;
        signalValues.resize(signalSemaphores.size());
        signalValues[0] = mNextFenceValue;

        VkTimelineSemaphoreSubmitInfo timelineInfo {};
        timelineInfo.sType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
        timelineInfo.pNext = NULL;
        timelineInfo.waitSemaphoreValueCount = waitValues.size();
        timelineInfo.pWaitSemaphoreValues = waitValues.data();
        timelineInfo.signalSemaphoreValueCount = signalValues.size();
        timelineInfo.pSignalSemaphoreValues = signalValues.data();

        VkSubmitInfo submitInfo {};
        submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
        submitInfo.pNext = &timelineInfo;

        VkPipelineStageFlags waitStages[] = { VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT, VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT };
        submitInfo.waitSemaphoreCount = waitSemaphores.size();
        submitInfo.pWaitSemaphores = waitSemaphores.data();
        submitInfo.pWaitDstStageMask = waitStages;

        submitInfo.commandBufferCount = 1;
        VkCommandBuffer dummy = buffer;
        submitInfo.pCommandBuffers = &dummy;

        submitInfo.signalSemaphoreCount = signalSemaphores.size();
        submitInfo.pSignalSemaphores = signalSemaphores.data();

        result = vkQueueSubmit(mGraphicsQueue, 1, &submitInfo, VK_NULL_HANDLE);
        VK_CHECK(result);

        mBufferPool.emplace_back(mNextFenceValue, buffer, std::move(attachedResources));

        return mNextFenceValue++;
    }

    VkDescriptorSet VulkanRenderContext::fetchTempDescriptorSet()
    {
        VkDescriptorSet set = nullptr;

        if (mTempDescriptorPool.size() > 1) {
            auto &[fenceValue, s] = mTempDescriptorPool.front();

            if (isFenceComplete(fenceValue)) {
                set = s;
                mTempDescriptorPool.erase(mTempDescriptorPool.begin());
            }
        }

        if (!set) {
            VkDescriptorSetAllocateInfo allocInfo {};
            allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
            allocInfo.descriptorPool = mDescriptorPool;
            allocInfo.descriptorSetCount = 1;
            allocInfo.pSetLayouts = &std::as_const(mTempBufferDescriptorSetLayout);
            VkResult result = vkAllocateDescriptorSets(GetDevice(), &allocInfo, &set);
            VK_CHECK(result);

            VkDebugUtilsObjectNameInfoEXT nameInfo {};
            nameInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
            nameInfo.objectType = VK_OBJECT_TYPE_DESCRIPTOR_SET;
            nameInfo.objectHandle = reinterpret_cast<uintptr_t>(set);
            nameInfo.pObjectName = "Pooled Temp Buffer Set";
            result = vkSetDebugUtilsObjectNameEXT(GetDevice(), &nameInfo);
            VK_CHECK(result);
        }

        mTempDescriptorPool.emplace_back(mNextFenceValue, set);

        return set;
    }

    bool VulkanRenderContext::isFenceComplete(uint64_t fenceValue)
    {
        // if it's greater than last seen fence value
        // check fence for latest completed value
        if (fenceValue > mLastCompletedFenceValue)
            vkGetSemaphoreCounterValueKHR(GetDevice(), mSemaphore, &mLastCompletedFenceValue);

        return fenceValue <= mLastCompletedFenceValue;
    }

    Threading::Task<void> VulkanRenderContext::unloadAllResources()
    {
        co_await RenderContext::unloadAllResources();

        for (std::pair<const std::string, VulkanPipelineLoader::Resource> &res : VulkanPipelineLoader::getSingleton()) {
            co_await res.second.forceUnload();
        }

        for (std::pair<const std::string, VulkanTextureLoader::Resource> &res : VulkanTextureLoader::getSingleton()) {
            co_await res.second.forceUnload();
        }

        for (std::pair<const std::string, VulkanMeshLoader::Resource> &res : VulkanMeshLoader::getSingleton()) {
            co_await res.second.forceUnload();
        }
    }

    bool VulkanRenderContext::supportsMultisampling() const
    {
        return true;
    }

    void VulkanRenderContext::createPipelineLayout()
    {
        VkDescriptorSetLayoutBinding uboLayoutBinding[3] {};
        for (size_t i = 0; i < 3; ++i) {
            uboLayoutBinding[i].binding = i;
            uboLayoutBinding[i].descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC;
            uboLayoutBinding[i].descriptorCount = 1;
            uboLayoutBinding[i].stageFlags = VK_SHADER_STAGE_ALL_GRAPHICS;
            uboLayoutBinding[i].pImmutableSamplers = nullptr;
        }

        VkDescriptorSetLayoutCreateInfo layoutInfo {};
        layoutInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
        layoutInfo.bindingCount = 3;
        layoutInfo.pBindings = uboLayoutBinding;

        VkResult result = vkCreateDescriptorSetLayout(*sDevice, &layoutInfo, nullptr, &mUBODescriptorSetLayout);
        VK_CHECK(result);

        VkDebugUtilsObjectNameInfoEXT nameInfo {};
        nameInfo.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
        nameInfo.objectType = VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT;
        nameInfo.objectHandle = reinterpret_cast<uintptr_t>(mUBODescriptorSetLayout.get());
        nameInfo.pObjectName = "UBO Layout";
        result = vkSetDebugUtilsObjectNameEXT(GetDevice(), &nameInfo);
        VK_CHECK(result);

        VkDescriptorSetLayoutBinding heapPushLayoutBindings {};
        heapPushLayoutBindings.binding = 0;
        heapPushLayoutBindings.descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
        heapPushLayoutBindings.descriptorCount = 4;
        heapPushLayoutBindings.stageFlags = VK_SHADER_STAGE_ALL;
        heapPushLayoutBindings.pImmutableSamplers = nullptr;

        layoutInfo.bindingCount = 1;
        layoutInfo.pBindings = &heapPushLayoutBindings;
        layoutInfo.flags = 0;

        result = vkCreateDescriptorSetLayout(*sDevice, &layoutInfo, nullptr, &mHeapDescriptorSetLayout);
        VK_CHECK(result);

        nameInfo.objectHandle = reinterpret_cast<uintptr_t>(mHeapDescriptorSetLayout.get());
        nameInfo.pObjectName = "Heap Layout";
        result = vkSetDebugUtilsObjectNameEXT(GetDevice(), &nameInfo);
        VK_CHECK(result);

        VkDescriptorSetLayoutBinding tempBufferPushLayoutBinding {};
        tempBufferPushLayoutBinding.binding = 0;
        tempBufferPushLayoutBinding.descriptorType = VK_DESCRIPTOR_TYPE_STORAGE_BUFFER;
        tempBufferPushLayoutBinding.descriptorCount = 1;
        tempBufferPushLayoutBinding.stageFlags = VK_SHADER_STAGE_ALL;
        tempBufferPushLayoutBinding.pImmutableSamplers = nullptr;

        layoutInfo.bindingCount = 1;
        layoutInfo.pBindings = &tempBufferPushLayoutBinding;
        layoutInfo.flags = 0;

        result = vkCreateDescriptorSetLayout(*sDevice, &layoutInfo, nullptr, &mTempBufferDescriptorSetLayout);
        VK_CHECK(result);

        nameInfo.objectHandle = reinterpret_cast<uintptr_t>(mTempBufferDescriptorSetLayout.get());
        nameInfo.pObjectName = "Temp Layout";
        result = vkSetDebugUtilsObjectNameEXT(GetDevice(), &nameInfo);
        VK_CHECK(result);

        VkDescriptorSetLayoutBinding imagePushLayoutBindings[4] {};
        for (size_t i = 0; i < 4; ++i) {
            imagePushLayoutBindings[i].binding = i;
            imagePushLayoutBindings[i].descriptorType = VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE;
            imagePushLayoutBindings[i].descriptorCount = 1;
            imagePushLayoutBindings[i].stageFlags = VK_SHADER_STAGE_FRAGMENT_BIT;
            imagePushLayoutBindings[i].pImmutableSamplers = nullptr;
        }

        layoutInfo.bindingCount = 4;
        layoutInfo.pBindings = imagePushLayoutBindings;
        layoutInfo.flags = 0;

        result = vkCreateDescriptorSetLayout(*sDevice, &layoutInfo, nullptr, &mResourceBlockDescriptorSetLayout);
        VK_CHECK(result);

        nameInfo.objectHandle = reinterpret_cast<uintptr_t>(mUBODescriptorSetLayout.get());
        nameInfo.pObjectName = "ResourceBlock Layout";
        result = vkSetDebugUtilsObjectNameEXT(GetDevice(), &nameInfo);
        VK_CHECK(result);

        layoutInfo.flags = 0;
        layoutInfo.pNext = nullptr;

        VkSamplerCreateInfo samplerInfo {};
        samplerInfo.sType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
        samplerInfo.magFilter = VK_FILTER_LINEAR;
        samplerInfo.minFilter = VK_FILTER_LINEAR;
        samplerInfo.addressModeU = VK_SAMPLER_ADDRESS_MODE_REPEAT;
        samplerInfo.addressModeV = VK_SAMPLER_ADDRESS_MODE_REPEAT;
        samplerInfo.addressModeW = VK_SAMPLER_ADDRESS_MODE_REPEAT;
        samplerInfo.mipLodBias = 0.0f;
        samplerInfo.maxAnisotropy = 1;
        samplerInfo.compareOp = VK_COMPARE_OP_ALWAYS;
        samplerInfo.borderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK;
        samplerInfo.minLod = 0;
        samplerInfo.maxLod = std::numeric_limits<float>::max();

        vkCreateSampler(*sDevice, &samplerInfo, nullptr, &mSamplers[0]);

        samplerInfo.addressModeU = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
        samplerInfo.addressModeV = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
        samplerInfo.addressModeW = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;

        vkCreateSampler(*sDevice, &samplerInfo, nullptr, &mSamplers[1]);

        VkDescriptorSetLayoutBinding samplerLayoutBinding {};
        samplerLayoutBinding.binding = 0;
        samplerLayoutBinding.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLER;
        samplerLayoutBinding.descriptorCount = 2;
        samplerLayoutBinding.stageFlags = VK_SHADER_STAGE_FRAGMENT_BIT;
        samplerLayoutBinding.pImmutableSamplers = &std::as_const(*mSamplers);

        layoutInfo.bindingCount = 1;
        layoutInfo.pBindings = &samplerLayoutBinding;
        result = vkCreateDescriptorSetLayout(*sDevice, &layoutInfo, nullptr, &mSamplerDescriptorSetLayout);
        VK_CHECK(result);

        nameInfo.objectHandle = reinterpret_cast<uintptr_t>(mSamplerDescriptorSetLayout.get());
        nameInfo.pObjectName = "Sampler Layout";
        result = vkSetDebugUtilsObjectNameEXT(GetDevice(), &nameInfo);
        VK_CHECK(result);

        VkDescriptorSetLayout descriptorSetLayouts[7] = { mUBODescriptorSetLayout, mHeapDescriptorSetLayout, mTempBufferDescriptorSetLayout, mResourceBlockDescriptorSetLayout, mResourceBlockDescriptorSetLayout, mResourceBlockDescriptorSetLayout, mSamplerDescriptorSetLayout };

        VkPipelineLayoutCreateInfo pipelineLayoutInfo {};
        pipelineLayoutInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
        pipelineLayoutInfo.setLayoutCount = 7; // Optional
        pipelineLayoutInfo.pSetLayouts = descriptorSetLayouts; // Optional
        pipelineLayoutInfo.pushConstantRangeCount = 0; // Optional
        pipelineLayoutInfo.pPushConstantRanges = nullptr; // Optional

        result = vkCreatePipelineLayout(*sDevice, &pipelineLayoutInfo, nullptr, &mPipelineLayout);
        VK_CHECK(result);

        VkDescriptorSetAllocateInfo allocInfo {};
        allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
        allocInfo.descriptorPool = mDescriptorPool;
        allocInfo.descriptorSetCount = 1;
        allocInfo.pSetLayouts = &std::as_const(mSamplerDescriptorSetLayout);
        result = vkAllocateDescriptorSets(GetDevice(), &allocInfo, &mSamplerDescriptorSet);
        VK_CHECK(result);

        nameInfo.objectType = VK_OBJECT_TYPE_DESCRIPTOR_SET;
        nameInfo.objectHandle = reinterpret_cast<uintptr_t>(mSamplerDescriptorSet);
        nameInfo.pObjectName = "Global Sampler Set";
        result = vkSetDebugUtilsObjectNameEXT(GetDevice(), &nameInfo);
        VK_CHECK(result);

        mDefaultTexture.setData({ 64, 64 }, sUnboundDefaultTexture);

        mDefaultResourceBlockDescriptorSet = allocateResourceBlock({});
    }

    static constexpr VkFormat vFormats[] = {
        VK_FORMAT_R32G32B32_SFLOAT,
        VK_FORMAT_R32_SFLOAT,
        VK_FORMAT_R32G32_SFLOAT,
        VK_FORMAT_R32G32B32_SFLOAT,
        VK_FORMAT_R32G32B32A32_SFLOAT,
        VK_FORMAT_R32G32_SFLOAT,
        VK_FORMAT_R32G32B32A32_SINT,
        VK_FORMAT_R32G32B32A32_SFLOAT
    };

    std::pair<std::vector<VkVertexInputBindingDescription>, std::vector<VkVertexInputAttributeDescription>> VulkanRenderContext::createVertexLayout(VertexFormat format, size_t instanceDataSize)
    {
        std::pair<std::vector<VkVertexInputBindingDescription>, std::vector<VkVertexInputAttributeDescription>> vertexLayoutDesc;

        uint32_t stride = format.stride();

        vertexLayoutDesc.first.push_back({ 0, stride, VK_VERTEX_INPUT_RATE_VERTEX });
        vertexLayoutDesc.first.push_back({ 2, 0, VK_VERTEX_INPUT_RATE_VERTEX });

        uint32_t offset = 0;
        for (uint32_t i = 0; i < VertexElements::size; ++i) {
            if (format.has(i)) {
                vertexLayoutDesc.second.push_back({ i, 0, vFormats[i], offset });
                offset += sVertexElementSizes[i];
            } else {
                vertexLayoutDesc.second.push_back({ i, 2, vFormats[i], vConstantOffsets[i] });
            }
        }

        if (instanceDataSize > 0) {
            vertexLayoutDesc.first.push_back({ 1, static_cast<uint32_t>(instanceDataSize), VK_VERTEX_INPUT_RATE_INSTANCE });
            assert(instanceDataSize % 16 == 0);
            for (size_t i = 0; i < instanceDataSize / 16; ++i) {
                vertexLayoutDesc.second.push_back({ static_cast<uint32_t>(VertexElements::size + i), 1, VK_FORMAT_R32G32B32A32_SFLOAT, static_cast<uint32_t>(i * 16) });
            }
        }

        return vertexLayoutDesc;
    }

    size_t VulkanRenderContext::tempAllocatorMemoryQuota() const
    {
        return mTempAllocator.totalBytes();
    }

}
}
