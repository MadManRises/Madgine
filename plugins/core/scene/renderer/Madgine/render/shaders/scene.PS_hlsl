#include "scene.sl"

#include "light.hlsl"

cbuffer PerApplication : register(b0)
{
    ScenePerApplication app;
}

cbuffer PerFrame : register(b1)
{   
    ScenePerFrame frame;
}

cbuffer PerObject : register(b2)
{
	ScenePerObject object;
} 

Texture2D diffuseTex : register(t0);
Texture2D emissiveTex : register(t1);
Texture2DMS<float> shadowDepthMap : register(t2); 
TextureCube<float> pointShadowDepthMaps0 : register(t3);
TextureCube<float> pointShadowDepthMaps1 : register(t4);

SamplerState texSampler : register(s0);
SamplerState clampSampler : register(s1);

struct PixelShaderInput {
    float4 color : COLOR; 
    float4 viewPos : POSITION;
    float3 normal : NORMAL;
    float2 uv : TEXCOORD0;
	float4 lightViewPosition : TEXCOORD1;
};

struct PixelShaderOutput {
	float4 fragColor : SV_Target0;
	float4 brightColor : SV_Target1;
};

float median(float r, float g, float b) {
    return max(min(r, g), min(max(r, g), b));
}

PixelShaderOutput main(PixelShaderInput IN)
{
    float4 diffuseColor = IN.color * object.diffuseColor;
	float4 specularColor = object.specularColor;

	if (object.hasTexture){
		if (object.hasDistanceField){
			float2 msdfUnit = 4.0/float2(512.0, 512.0);
			float4 sample = diffuseTex.Sample(texSampler, IN.uv);
			float sigDist = median(sample.r, sample.g, sample.b) - 0.5;
			//sigDist *= dot(msdfUnit, float2(0.5));
			sigDist *= 4.0;
			float opacity = saturate(sigDist + 0.5);
			diffuseColor = lerp(float4(0,0,0,0), diffuseColor, opacity);
		}
		else
		{
			diffuseColor = diffuseColor * diffuseTex.Sample(texSampler, IN.uv);
		}
	}

	PixelShaderOutput OUT;
	
	if (object.hasLight){
		float3 lightDiffuseIntensity = float3(0.0, 0.0, 0.0);
		float3 lightSpecularIntensity = float3(0.0, 0.0, 0.0);
		
		castDirectionalShadowLight(
			lightDiffuseIntensity,
			lightSpecularIntensity,
			frame.light, 
			IN.lightViewPosition,
			IN.viewPos.xyz,
			IN.normal,
			shadowDepthMap, 
			app.ambientFactor, 
			app.diffuseFactor,
			app.specularFactor,
			object.shininess
		);
		for (int i = 0; i < frame.pointLightCount; ++i){
			if (i == 0)
				castPointShadowLight(
					lightDiffuseIntensity,
					lightSpecularIntensity,
					frame.pointLights[i],
					IN.viewPos.xyz,
					IN.normal,
					pointShadowDepthMaps0,
					texSampler,
					app.ambientFactor,
					app.diffuseFactor,
					app.specularFactor,
					object.shininess
				);
			else
				castPointShadowLight(
					lightDiffuseIntensity,
					lightSpecularIntensity,
					frame.pointLights[i],
					IN.viewPos.xyz,
					IN.normal,
					pointShadowDepthMaps1,
					texSampler,
					app.ambientFactor,
					app.diffuseFactor,
					app.specularFactor,
					object.shininess
				);			
		}

		OUT.fragColor = 
			float4(
				lightDiffuseIntensity * diffuseColor +
				lightSpecularIntensity * specularColor, 
				diffuseColor.a
			);
	}else{
		OUT.fragColor = diffuseColor;
	}

	
	if (app.hasHDR){
		OUT.brightColor = emissiveTex.Sample(texSampler, IN.uv);
		OUT.brightColor.a = 1.0;
		float brightness = dot(OUT.fragColor.rgb, float3(0.2126, 0.7152, 0.0722));
		if(brightness > 1.0)
			OUT.brightColor.rgb += OUT.fragColor.rgb;
	}else{
		OUT.fragColor.rgb += emissiveTex.Sample(texSampler, IN.uv).rgb;
	}
	
    return OUT;
}