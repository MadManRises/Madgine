#include "pointshadow.sl"

struct GeometryShaderInput {
    float4 position : SV_POSITION;
};

struct GeometryShaderOutput {
    float4 position : SV_POSITION;
    float4 worldPos : POSITION;
    uint layer : SV_RenderTargetArrayIndex;
};

cbuffer PerApplication : register(b0)
{
	PointShadowPerApplication app;
};


void helper(GeometryShaderInput IN[3], float4x4 m, int layer, inout TriangleStream<GeometryShaderOutput> stream){
    GeometryShaderOutput OUT;
    OUT.layer = layer; // built-in variable that specifies to which face we render.
    for(int i = 0; i < 3; ++i) // for each triangle vertex
    {
        OUT.worldPos = IN[i].position;
        OUT.position = mul(app.p, mul(m, IN[i].position));
        stream.Append(OUT);
    }    
    stream.RestartStrip();
}

[maxvertexcount(18)]
void main(triangle GeometryShaderInput IN[3], inout TriangleStream<GeometryShaderOutput> stream)
{
    float4x4 mx1 = float4x4(0,0,-1,0, 0,1,0,0, 1,0,0,0, 0,0,0,1);
   float4x4 mx2 = float4x4(0,0,1,0, 0,1,0,0, -1,0,0,0, 0,0,0,1);
   float4x4 my1 = float4x4(1,0,0,0, 0,0,-1,0, 0,1,0,0, 0,0,0,1);
   float4x4 my2 = float4x4(1,0,0,0, 0,0,1,0, 0,-1,0,0, 0,0,0,1);
   float4x4 mz1 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
   float4x4 mz2 = float4x4(-1,0,0,0, 0,1,0,0, 0,0,-1,0, 0,0,0,1);
   
   helper(IN, mx1, 0, stream);
   helper(IN, mx2, 1, stream);
   helper(IN, my1, 2, stream);
   helper(IN, my2, 3, stream);
   helper(IN, mz1, 4, stream);
   helper(IN, mz2, 5, stream);
}  