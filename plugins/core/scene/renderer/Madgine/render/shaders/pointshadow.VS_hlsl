#include "pointshadow.sl"

#include "light.hlsl"


cbuffer PerApplication : register(b0)
{
	PointShadowPerApplication app;
};

cbuffer PerFrame : register(b1)
{
	PointShadowPerFrame frame;
};

cbuffer PerObject : register(b2)
{
	PointShadowPerObject object;
};

cbuffer Bones : register(b3)
{
    matrix bones[32];
}


struct AppData {
    float3 aPos : POSITION0;
	float aW : POSITION1;
    float2 aPos2 : POSITION2;
    float3 aNormal : NORMAL;
    float4 aColor : COLOR;
    float2 aUV : TEXCOORD;
	int4 aBoneIDs : BONEINDICES;
	float4 aWeights : WEIGHTS;
    PointShadowInstanceData aInstance : INSTANCEDATA;
};

struct VertexShaderOutput {
    float4 position : SV_POSITION;
};


VertexShaderOutput main(AppData IN)
{
	VertexShaderOutput OUT;

    float2 aPos2 = IN.aPos2;
	float4 aPos = float4(IN.aPos, IN.aW);
	
	float4 worldPos;

	if (object.hasSkeleton){
		float4x4 BoneTransform = bones[IN.aBoneIDs[0]] * IN.aWeights[0]
		+ bones[IN.aBoneIDs[1]] * IN.aWeights[1]
		+ bones[IN.aBoneIDs[2]] * IN.aWeights[2]
		+ bones[IN.aBoneIDs[3]] * IN.aWeights[3];
		worldPos = mul(IN.aInstance.m, mul(BoneTransform, aPos));
	}else{
		worldPos = mul(IN.aInstance.m, aPos);
	}

    OUT.position = worldPos + float4(aPos2, 0.0, 0.0) - float4(frame.position, 0.0f);	

	return OUT;
}