#include "scene.sl"

#include "light.hlsl"

cbuffer PerApplication : register(b0)
{
    ScenePerApplication app;
}

cbuffer PerFrame : register(b1)
{   
    ScenePerFrame frame;
}

cbuffer PerObject : register(b2)
{ 
    ScenePerObject object;
}

StructuredBuffer<SceneInstanceData> InstanceData : register(t0, space1);

struct AppData {
    float3 aPos : POSITION0;
    float aW : POSITION1;
    float2 aPos2 : POSITION2;
    float3 aNormal : NORMAL; 
    float4 aColor : COLOR;
    float2 aUV : TEXCOORD;
	int4 aBoneIDs : BONEINDICES;
	float4 aWeights : WEIGHTS;
    uint instanceId : SV_InstanceID;
};

struct VertexShaderOutput {
    float4 color : COLOR;
    float4 viewPos : POSITION;
    float3 normal : NORMAL;
    float2 uv : TEXCOORD0;
    float4 lightViewPosition : TEXCOORD1;
    float4 position : SV_Position;
};

VertexShaderOutput main(AppData IN)
{
    VertexShaderOutput OUT; 

    SceneInstanceData aInstance = InstanceData[IN.instanceId];
     
    float4 pos = float4(IN.aPos, IN.aW);

    float2 aPos2 = IN.aPos2;

    float4 effectivePos = pos;
    
    /*if (aInstance.bones.buffer() != 0) {
	    matrix BoneTransform = aInstance.bones[IN.aBoneIDs[0]] * IN.aWeights[0]
	    + aInstance.bones[IN.aBoneIDs[1]] * IN.aWeights[1]
	    + aInstance.bones[IN.aBoneIDs[2]] * IN.aWeights[2]
	    + aInstance.bones[IN.aBoneIDs[3]] * IN.aWeights[3];
	    effectivePos = mul(BoneTransform, effectivePos);
    }*/

    OUT.viewPos = mul(aInstance.mv, effectivePos);
    
    OUT.position = mul(app.p, OUT.viewPos + float4(aPos2, 0.0, 0.0));
    
    OUT.color = IN.aColor * aInstance.diffuseColor;

	OUT.normal = mul((float3x3)aInstance.anti_mv, IN.aNormal);

	OUT.uv = IN.aUV;

    OUT.lightViewPosition = projectShadow(frame.light.caster, OUT.viewPos);
 
    return OUT;
}
